import heapq
print("192372293-Mahesh K")
def a_star(graph, start, goal, heuristic):
    open_set = []
    heapq.heappush(open_set, (0 + heuristic[start], 0, start, [start]))  # (f_score, g_score, node, path)

    while open_set:
        f, g, current, path = heapq.heappop(open_set)

        if current == goal:
            return path, g

        for neighbor, cost in graph[current]:
            new_g = g + cost
            new_f = new_g + heuristic[neighbor]
            heapq.heappush(open_set, (new_f, new_g, neighbor, path + [neighbor]))

    return None, float('inf')  # No path found

# Example graph: Each node points to list of tuples (neighbor, cost)
graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('C', 2), ('D', 5)],
    'C': [('D', 1)],
    'D': []
}

# Heuristic values (estimated cost from each node to goal 'D')
heuristic = {
    'A': 7,
    'B': 6,
    'C': 2,
    'D': 0
}

# Run A* algorithm
start_node = 'A'
goal_node = 'D'
path, cost = a_star(graph, start_node, goal_node, heuristic)

print("Shortest path:", path)
print("Total cost:", cost)
